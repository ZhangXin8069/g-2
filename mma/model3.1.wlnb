{
 "cells": [
  {
   "kind": 2,
   "value": "(* Define the problem domain and grid parameters *)\nxStart = 0;\nxEnd = 2;\nyStart = xEnd + 0.01;\nyEnd = 30 + 0.01;\n\nxResolution = Round[(xEnd-xStart)*1000+1];\nyResolution = Round[(yEnd-yStart)*100+1];\n\nhx = (xEnd - xStart)/(xResolution - 1);\nhy = (yEnd - yStart)/(yResolution - 1);\n\nxGrid = Range[xStart, xEnd, hx];\nyGrid = Range[yStart, yEnd, hy];\nLength[xGrid]\nLength[yGrid]\n(* xGrid *)\n(* yGrid *)",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Define the function f *)\nf[x_, M_, G_, F_] := F^2*((M^4 + M^2*G^2)/(24*Pi*((x - M^2)^2 + M^2*G^2)))",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Set parameters *)\n(* fV,m,gamma *)\nparams = {{0.22, 0.78, 0.15}, {0.19, 1.46, 0.4}, {0.14, 1.72, 0.25}, {0.14, 1.90, 0.1}};\nparams",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Calculate F *)\nfAll=f[xGrid, #[[2]], #[[3]], 1] & /@ params;\nF = Total[fAll];\n(* why F_=1 ? *)\nLength[F]",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Calculate G1 and G2 *)\n(* f1[x_]:=Sin[2*Pi*x]\nF1=f1[xGrid] *)\n\nF1=fAll[[1]];\n\nf2[x_]:=x-x;\nF2=f2[xGrid];",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "G1 = ParallelTable[NIntegrate[1/(yGrid[[i]]-xGrid).F1, {x, xStart, xEnd}, Method -> \"Trapezoidal\",  MaxPoints -> xResolution, ParallelizationMethod -> \"ThreadPool\", \"MaxThreads\" -> 16, PrecisionGoal -> 10, {x, xStart, xEnd}],{i, 1, yResolution}];\nG2 = ParallelTable[NIntegrate[1/(yGrid[[i]]-xGrid).F2, {x, xStart, xEnd}, Method -> \"Trapezoidal\",  MaxPoints -> xResolution, ParallelizationMethod -> \"ThreadPool\", \"MaxThreads\" -> 16, PrecisionGoal -> 10, {x, xStart, xEnd}],{i, 1, yResolution}];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "NIntegrate[1/(yGrid[[2]]-xGrid)*F1, {x, xStart, xEnd}, Method -> \"Trapezoidal\",  MaxPoints -> xResolution]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "tmpG1=NIntegrate[f[x], {x, a, b}, Method -> \"Trapezoidal\"]\n",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Define and calculate error parameters and exact solution *)\nB1 = 1;\nB2 = 2;\nxD = 1.01;\nb1 = xD*B1;\nb2 = xD*B2;\n\nfExact = B1*F1 + B2*F2;\nfDelta = b1*F1 + b2*F2;\n\ngExact = B1*G1 + B2*G2;\ngDelta = b1*G1 + b2*G2;",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Calculate VExact and G3 *)\n(* MM = b1*fExact[[1]] + b2*fExact[[-1]]; *)\nMM = fDelta[[1]];\n(* NN = b1*fExact[xResolution] + b2*fExact[xResolution]; *)\nNN = fDelta[[xResolution]];\nVExact = (MM*(xGrid - xEnd))/(xStart - xEnd) + (NN*(xGrid - xStart))/(xEnd - xStart);\nG3 = ConstantArray[0, yResolution];\nFor[i = 1, i <= xResolution, i++,\n    G3[[i]] = Total[1/(yGrid[[i]]-xGrid)*VExact]*hx;\n]\n(* little strange *)",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Calculate UExact and GExact *)\nUExact = fExact - VExact;\nGExact = gExact - G3;\nGDelta = gDelta - G3;",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Construct matrices A and H1 *)\nAphi = ConstantArray[0, {yResolution, xResolution}];\n\nFor[j = 2, j <= xResolution - 1, j++,\n    Aphi[[All, j]] = (1/hx)*((yGrid - xGrid[[j - 1]])*Log[yGrid - xGrid[[j - 1]]] +(xGrid[[j - 1]] - xGrid[[j]]) + (yGrid - xGrid[[j + 1]])*Log[yGrid - xGrid[[j + 1]]] -2*(yGrid - xGrid[[j]])*Log[yGrid - xGrid[[j]]] - (xGrid[[j]] - xGrid[[j + 1]]));\n]\n\nAphi[[All, 1]] = Log[yGrid - xGrid[[1]]] + (1/hx)*((yGrid - xGrid[[2]])*Log[yGrid - xGrid[[2]]] - (yGrid - xGrid[[1]])*Log[yGrid - xGrid[[1]]] - (xGrid[[1]] - xGrid[[2]]));\nAphi[[All, -1]] = -Log[yGrid - xGrid[[-1]]] + (1/hx)*(-(yGrid - xGrid[[-1]])*Log[yGrid - xGrid[[-1]]] + (yGrid - xGrid[[-2]])*Log[yGrid - xGrid[[-2]]] + (xGrid[[-2]] - xGrid[[-1]]));",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "A = Transpose[Aphi].Aphi*hy;\nba = ConstantArray[0, xResolution];\n\nFor[i = 1, i <= xResolution, i++,\n    ba[[i]]=Total[Aphi[[All,i]]*GDelta]*hy;\n]\n(* 关于“trapz”存在问题 ,使用了求和代替了积分，存在一些偏差*)\nA = A[[2 ;; -2, 2 ;; -2]];\nba = ba[[2 ;; -2]];",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "f[x_] := x^2\na = 0\nb = 1\n\nI = ",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "M = ConstantArray[0, {xResolution, xResolution}];\nM[[1, 1]] = 4;\nM[[1, 2]] = 2;\nFor[i = 2, i <= xResolution - 1, i++,\n  M[[i, i]] = 8;\n  M[[i, i - 1]] = 2;\n  M[[i, i + 1]] = 2;\n]\nM[[xResolution, xResolution]] = 4;\nM[[xResolution, xResolution - 1]] = 2;\nM = (hx/12)*M;",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "M1 = ConstantArray[0, {xResolution, xResolution}];\nM1[[1, 1]] = 1;\nM1[[1, 2]] = -1;\nFor[i = 2, i <= xResolution - 1, i++,\n  M1[[i, i]] = 2;\n  M1[[i, i - 1]] = -1;\n  M1[[i, i + 1]] = -1;\n]\nM1[[xResolution, xResolution]] = 1;\nM1[[xResolution, xResolution - 1]] = -1;\nM1 = (1/hx)*M1;\nH1 = M + M1;\nH1 = H1[[2 ;; -2, 2 ;; -2]];",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Iteratively choose regularization parameter *)\nnumIterations = 20;\nalphaValues = Table[10^(-k), {k, 1, numIterations}];\nLcurveValues = ConstantArray[0, numIterations];\nLHcurveValues = ConstantArray[0, numIterations];\nGCVvalues = ConstantArray[0, numIterations];\nRhoValues = ConstantArray[0, numIterations];",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "A[[2,1]]==A[[1,2]]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "Inverse[A + alphaValues[[2]]*H1]",
   "languageId": "wolfram",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "For[k = 1, k <= numIterations, k++,\n  ua = LinearSolve[, ba];1.029424016273072e-04}];\n  fa = Ua + VExact; *)\n  Print[ua]\n  Break\n  (* Calculate error and metrics *)\n  (* Total[1/Transpose[Outer[Subtract, yGrid, xGrid]]*F1]*hx; *)\n  (* res = Sqrt[Total[(Aphi.fa - gDelta)^2]];\n  err = Sqrt[Total[(fa - fExact)^2]]; *)\n\n  (* Calculate L-curve and LH-curve values\n  LcurveValues[[k]] = Sqrt[NIntegrate[fa^2, {x, xStart, xEnd}]]*res;\n  LHcurveValues[[k]] = Sqrt[NIntegrate[(fa^2 + (D[fa, x])^2), {x, xStart, xEnd}]]*res;\n\n  (* Use GCV method to select best alpha *)\n  VV = IdentityMatrix[yResolution] - Aphi.LinearSolve[Aphi.Transpose[Aphi] + alphaValues[[k]]*IdentityMatrix[xResolution], Transpose[Aphi]];\n  V1 = Norm[VV.(gDelta + G2Delta)]^2;\n  V2 = Tr[VV]^2;\n  GCVvalues[[k]] = V1/V2;\n\n  (* Calculate Rho *)\n  RhoValues[[k]] = Norm[alphaValues[[k]]*LinearSolve[Aphi.Transpose[Aphi] + alphaValues[[k]]*IdentityMatrix[xResolution], fa]]; *)\n]",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Select the best alpha value and method *)\nminLcurveIndex = Position[LcurveValues, Min[LcurveValues]][[1, 1]];\nminLHcurveIndex = Position[LHcurveValues, Min[LHcurveValues]][[1, 1]];\nminGCVindex = Position[GCVvalues, Min[GCVvalues]][[1, 1]];\nminRhoIndex = Position[RhoValues, Min[RhoValues]][[1, 1]];",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Output the results *)\nresultMethods = {\"L-curve\", \"LH-curve\", \"GCV\", \"Approximately Optimal\"};\nresultAlphaValues = {alphaValues[[minLcurveIndex]], alphaValues[[minLHcurveIndex]],\n                     alphaValues[[minGCVindex]], alphaValues[[minRhoIndex]]};\n\nresults = Association[\n  \"Method\" -> resultMethods,\n  \"Best Alpha Value\" -> resultAlphaValues\n];\n\nPrint[results]; (* Display the results *)\n",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  },
  {
   "kind": 2,
   "value": "(* Plotting Section *)\n\n(* Plot the exact and computed solutions *)\nListLinePlot[{xGrid, fExact}, PlotStyle -> {Red, Dashed}, PlotLegends -> {\"Exact Solution\"}];\nListLinePlot[{xGrid, fa}, PlotStyle -> {Blue, Thick}, PlotLegends -> {\"Computed Solution\"}];\nxlabel = \"x\";\nylabel = \"f(x)\";\ntitle = \"Exact vs. Computed Solutions\";\nLegended[Show[%, Frame -> True, FrameLabel -> {xlabel, ylabel}, PlotLabel -> title], Placed[LineLegend[{Red, Blue}, {\"Exact\", \"Computed\"}, LegendLayout -> \"Row\"], {0.8, 0.8}]]\n\n(* Plot the L-curve and LH-curve *)\nListLogLogPlot[{alphaValues, LcurveValues}, PlotStyle -> {Green, Thick}, Joined -> True, PlotLegends -> {\"L-curve\"}];\nListLogLogPlot[{alphaValues, LHcurveValues}, PlotStyle -> {Purple, Thick}, Joined -> True, PlotLegends -> {\"LH-curve\"}];\nxlabel = \"Log(Alpha)\";\nylabel = \"Log(Metric Value)\";\ntitle = \"L-curve and LH-curve\";\nLegended[Show[%, Frame -> True, FrameLabel -> {xlabel, ylabel}, PlotLabel -> title], Placed[LineLegend[{Green, Purple}, {\"L-curve\", \"LH-curve\"}, LegendLayout -> \"Row\"], {0.8, 0.8}]]\n\n(* Plot the GCV values *)\nListLogLogPlot[{alphaValues, GCVvalues}, PlotStyle -> {Orange, Thick}, Joined -> True, PlotLegends -> {\"GCV\"}];\nxlabel = \"Log(Alpha)\";\nylabel = \"Log(GCV Value)\";\ntitle = \"Generalized Cross-Validation (GCV)\";\nLegended[Show[%, Frame -> True, FrameLabel -> {xlabel, ylabel}, PlotLabel -> title], Placed[LineLegend[{Orange}, {\"GCV\"}], {0.8, 0.8}]]\n\n(* Plot the Rho values *)\nListLogPlot[{alphaValues, RhoValues}, PlotStyle -> {Brown, Thick}, Joined -> True, PlotLegends -> {\"Rho\"}];\nxlabel = \"Log(Alpha)\";\nylabel = \"Rho Value\";\ntitle = \"Rho Values\";\nLegended[Show[%, Frame -> True, FrameLabel -> {xlabel, ylabel}, PlotLabel -> title], Placed[LineLegend[{Brown}, {\"Rho\"}], {0.8, 0.8}]]\n\n(* ... End of Plotting Section ... *)\n",
   "languageId": "wolfram",
   "mime": "text/plain",
   "outputs": [],
   "metadata": {},
   "executionSummary": {}
  }
 ]
}